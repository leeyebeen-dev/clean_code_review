코드 형식은 중요하다. 너무 중요해서 무시하기 어렵다.

코드 형식은 의사소통의 일환이다. 의사소통은 전문 개발자의 일차적인 의무다.
오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아놓은 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 미친다.
원래 코드는 사라질지라도 개발자의 스타일과 규율은 사라지지 않는다.


💡 적절한 행 길이를 유지하라
소스코드의 적당한 길이는 어느 정도일까 ?

500줄을 넘지 않고 대부분 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다. → 반드시 지킬 규칙은 아니지만 바람직한 규칙

일반적으로 큰 파일보다 작은 파일이 이해하기 쉽다.


신문 기사처럼 작성하라
소스 파일도 신문 기사와 비슷하게 작성한다. 이름은 간단하면서도 설명이 가능하게 짓는다. 이름만 보고도 올바른 모듈을 살펴보고 있는지 아닌지를 판단할 정도로 신경 써서 짓는다. 소스파일의 첫 부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다. 마지막에는 가장 저차원 함수와 세부 내역이 온다.
신문이 사실, 날짜, 이름 등 무작위로 뒤섞은 긴 기사 하나만 싣는다면 아무도 일지 않는다.


개념은 빈 행으로 분리하라
코드의 각 행은 수식이나 절을 나타내고, 일련의 행 묶음은 완결된 생각 하나를 표현한다. 생각 사이는 빈 행을 넣어 분리해야 마땅하다. 빈 행은 새로운 개념을 시작한다는 시각적 단서이다. 빈 행은 가독성을 높인다.

// 빈 행을 넣지 않을 경우
package fitnesse.wikitext.widgets;
import java.util.regex.*;
public class BoldWidget extends ParentWidget {
...

// 빈 행을 넣을 경우
package fitnesse.wikitext.widgets;

import java.util.regex.*;

public class BoldWidget extends ParentWidget {
...

세로 밀집도
줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다.
즉, 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다.

public class ReporterConfig {
	private String m_className;
	private List<Property> m_properties = new ArrayList<Property>();
	
	public void addProperty(Property property) { 
		m_properties.add(property);
	}

>>코드가 한눈에 들어온다.
>>변수 2개에 메서드 1개인 클래스라는 사실이 드러난다.

수직거리
서로 밀접한 개념은 세로로 가까이 둬야 한다.(두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다.)
타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다.
(protected 변수를 피해야 하는 이유 중 하나)

같은 파일에 속할 정도로 밀접한 두 개념은 세로 거리로 연관성을 표현한다. 연관성은 한 개념을 이해하는 데 다른 개념이 중요한 정도.

변수 선언 : 변수는 사용하는 위치에 최대한 가까이 선언한다.
우리가 만드는 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다.
인스턴스 변수 선언 : 클래스 맨 처음에 선언한다. 변수 간에 세로로 거리를 두지 않는다. 잘 설계한 클래스는 클래스의 많은 메서드가 인스턴스 변수를 사용하기 때문이다.
종속 함수 : 한 함수가 다른 함수를 호출한다면 두 함수를 세로로 가까이 배치한다. 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다.
개념적 유사성 : 어떤 코드는 서로 끌어당긴다. 개념적인 친화도가 높기 때문이다. 친화도가 높을수록 코드를 가까이 배치한다.
한 함수가 다른 함수를 호출해 생기는 직접적인 종속성 / 변수와 그 변수를 사용하는 함수 / 비슷한 동작을 수행하는 일군의 함수

세로 순서
일반적으로 함수 호출 종속성은 아래 방향으로 유지한다. 호출되는 함수를 호출하는 함수보다 나중에 배치한다. 소스 코드 모듈이 고차원에서 저차원으로 자연스럽게 내려간다. 가장 중요한 개념을 가장 먼저 표현한다.


💡 가로 형식 맞추기
한 행은 가로로 얼마나 길어야 적당할까?

짧은 행이 바람직하다. 홀러리스가 내놓은 80자 제한은 다소 인위적이다.
100자나 120자에 달해도 나쁘지 않다. 하지만 그 이상은 주의부족이다.

개인적으로 120자 정도로 행 길이를 제한한다. (저자의 생각)


가로 공백과 밀집도
가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다.
함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않는다. 함수와 인수는 서로 밀접하기 때문이다. 공백을 넣으면 한 개념이 아닌 별개로 보인다. 연산자 우선순위를 강조하기 위해서 공백을 사용한다. 수식을 읽기 편하다. 승수 사이는 공백이 없다. 곱셈은 우선순위가 가장 높기 때문이다. 항 사이에는 공백이 들어간다. 덧셈, 뺄셈은 우선순위가 곱셈보다 낮기 때문이다. 공백을 넣어줘도 나중에 도구에서 없애는 경우가 흔하다.


가로 정렬
가로 정렬은 깔끔해 보일지 몰라도 유용하지 못하다. 이유는 코드가 엉뚱한 부분을 강조해 진짜 의도가 가려지기 때문이다. 코드 형식을 자동으로 맞춰주는 도구는 대다수가 정렬을 무시하고 원래대로 돌려 놓는다.
선언문과 할당문을 별도로 정렬하지 않는다. 정렬하지 않으면 오히려 중대한 결함을 찾기 쉽다. 선언부가 길다면 클래스를 쪼개야 한다.


들여쓰기
들여쓰기한 파일은 구조가 한눈에 들어온다.
반면, 들여쓰기 하지 않은 코드는 열심히 분석하지 않는한 거의 불가하다.

들여쓰기 무시하기 : 간단한 if문, while문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다. 하지만 들여쓰기를 넣어 코드의 가독성을 높여야 한다.
    >>BAD
    public class CommentWidget extends TextWidget {
    	public static final String REGEXP = "^#[^\r\n]*(?:(?:\r\n)|\n|\r)?";
    	
    	public CommentWidget(ParentWidget parent, String text){super(parent, text);}
    	public String render() throws Exception {return ""; } 
    }
    
    >>GOOD
    public class CommentWidget extends TextWidget {
    	public static final String REGEXP = "^#[^\r\n]*(?:(?:\r\n)|\n|\r)?";
    	
    	public CommentWidget(ParentWidget parent, String text){
    		super(parent, text);
    	}
    	
    	public String render() throws Exception {
    		return ""; 
    	} 
    }

가짜 범위
빈 while문이나 for문을 접한다. 피하지 못할 때는 빈 블록을 올바로 들여쓰고 괄호로 감싼다.


💡 팀 규칙 👑
프로그래머라면 각자 선호하는 규칙이 있지만 ✨팀에 속한다면 자신이 선호해야 할 규칙은 팀 규칙✨이다.

팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다. 그래야 소프트웨어가 일관적인 스타일을 보인다.

좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다는 사실을 기억하길 바란다.
스타일은 일관적이고 매끄러워야 한다.
한 소스 파일에서 봤던 형식이 다른 소스 파일에도 쓰이리라는 신뢰감을 독자에게 줘야 한다.


💡 밥 아저씨의 형식 규칙
